<CATALOG>

<TEXT>
<TOPIC>Character</TOPIC>
<TIP>

Too many techies come across as arrogant in interviews, says Sean Chou, CTO of Fieldglass, a software technology company. "A lot of techies are very talented, but what comes out is arrogance," he says.

Confidence is desirable, not arrogance. Arrogance suggests "they can't be a team player," Chou notes.</TIP>
<SOURCE>Monster</SOURCE>
</TEXT>

<TEXT>
<TOPIC>Answers</TOPIC>
<TIP>

Be ready to say NO I don't know. Interviewers are not gauging you with the correct answers that you provided. They are gauging you based on how open you are to learn new areas.</TIP>
<SOURCE>LinkedIn</SOURCE>
</TEXT>

<TEXT>
<TOPIC>Preparation</TOPIC>
<TIP>

Most importantly, pick the right prep book for your level and interests. Cracking the Coding Interview is a great resource, but if you're not already a reasonably experienced programmer, it won't make up for experience. If you're just starting out, there are other books you'll get more mileage out of, such as Programming Interviews Exposed: Secrets to Landing Your Next Job. And there are plenty of more specialized and advanced books for those with more experience.</TIP>
<SOURCE>Forbes</SOURCE>
</TEXT>

<TEXT>
<TOPIC>Closing Interviews</TOPIC>
<TIP>

Failure to Close:

Techies often fail to close the interview. Rather than emphasizing how much they would love to join the company or asking what the next step in the process will be, techies may let the interview "fade out", they're not closing, they're not selling themselves.

</TIP>
<SOURCE>Monster</SOURCE>
</TEXT>

<TEXT>
<TOPIC>Variation</TOPIC>
<TIP>
Be Ready for Anything:
Once you've made it to your interview, you should be prepared for a few different kinds of problem solving. Your interviewers may ask you to talk through how you would solve a problem, they may open a computer and ask you to guide them through creating code, or they may have you write the code yourself on a whiteboard. Be prepared for variation, and don't get tripped up on the details! No matter what method your interviewers are using, it's your problem solving skills that they're really testing.
</TIP>
<SOURCE>Forbes</SOURCE>
</TEXT>

<TEXT>
<TOPIC>Asking Questions</TOPIC>
<TIP>

Ask Questions:

When you're presented with a problem, think it through and make sure you fully understand what you're being asked to return. Don't be afraid to ask questions early if anything is unclear. If there are edge cases, for example, ask how your interviewers want them to be handled. Should you throw an exception? Break?

Also make sure to ask procedural questions to understand what the interviewers are looking for and what your constraints are - e.g., "Is there a specific language you'd like me to give you my solution in?" or "Can I assume I have access to any Python library?"


And don't make assumptions. Even if you're pretty sure it's safe, mention out loud what it is you're thinking so the interviewers can let you know if you're missing something.</TIP>
<SOURCE>Forbes</SOURCE>
</TEXT>

<TEXT>
<TOPIC>Timing</TOPIC>
<TIP>
Take Your Time:

Once you understand the question you're being asked, don't be afraid to take a minute to think and process before you start solving the problem. As long as you aren't being barraged with quick, knowledge-based questions, pausing after being asked the question is a good thing. Of course - make sure you're not taking 10 minutes to solve it in your head without saying a word! The point is to use your time up front to structure your approach, not to try to write all the code in your head before you touch marker to whiteboard.
</TIP>
<SOURCE>Forbes</SOURCE>
</TEXT>

<TEXT>
<TOPIC>Flexibility</TOPIC>
<TIP>
Bring Your People Skills, Too:

Just because you're going for an engineering job doesn't mean you can slack on being personable and responsible. I've heard horror stories of fantastic programmers who weren't hired because they weren't a culture fit or had a bad attitude. I'm sure you have, too. Don't be that person.
</TIP>
<SOURCE>Forbes</SOURCE>
</TEXT>

<TEXT>
<TOPIC>Quotes - Staying Motivated</TOPIC>
<TIP>
"Sometimes when you innovate, you make mistakes. It is best to admit them quickly, and get on with improving your other innovations."
</TIP>
<SOURCE>Steve Jobs</SOURCE>
</TEXT>

<TEXT>
<TOPIC>Having Industry Insight</TOPIC>
<TIP>
Software innovation, like almost every other kind of innovation, requires the ability to collaborate and share ideas with other people, and to sit down and talk with customers and get their feedback and understand their needs.
</TIP>
<SOURCE>Bill Gates</SOURCE>
</TEXT>



</CATALOG>